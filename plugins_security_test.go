package paramvalidator

import (
	"strings"
	"testing"
	"time"
	"unicode/utf8"

	"github.com/smalloff/paramvalidator/plugins"
)

// TestPatternPluginSecurity —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω-–ø–ª–∞–≥–∏–Ω–∞
func TestPatternPluginSecurity(t *testing.T) {
	plugin := plugins.NewPatternPlugin()

	tests := []struct {
		name        string
		pattern     string
		value       string
		expectValid bool
		description string
	}{
		{
			name:        "Empty pattern",
			pattern:     "in:",
			value:       "test",
			expectValid: false,
			description: "Empty pattern should be rejected",
		},
		{
			name:        "Only wildcard",
			pattern:     "in:*",
			value:       "any value",
			expectValid: true,
			description: "Single wildcard should match any string",
		},
		{
			name:        "Multiple consecutive wildcards",
			pattern:     "in:**",
			value:       "test",
			expectValid: true,
			description: "Multiple wildcards should be handled correctly",
		},
		{
			name:        "Pattern with special regex chars",
			pattern:     "in:*.*+?[](){}|^$\\*",
			value:       "test.test+?[](){}|^$\\test",
			expectValid: true,
			description: "Special regex characters should be treated literally",
		},
		{
			name:        "Unicode pattern safety",
			pattern:     "in:*üéâ*üöÄ*",
			value:       "startüéâmiddleüöÄend",
			expectValid: true,
			description: "Unicode characters should be handled safely",
		},
		{
			name:        "Null bytes in pattern",
			pattern:     "in:*\x00*",
			value:       "test\x00value",
			expectValid: true,
			description: "Null bytes should be handled",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			validator, err := plugin.Parse("test", tt.pattern)
			if err != nil {
				if tt.expectValid {
					t.Errorf("Unexpected error: %v", err)
				}
				return
			}

			result := validator(tt.value)
			if result != tt.expectValid {
				t.Errorf("%s: expected %v, got %v", tt.description, tt.expectValid, result)
			}
		})
	}
}

// TestPatternPluginReDoSProtection —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç ReDoS –∞—Ç–∞–∫
func TestPatternPluginReDoSProtection(t *testing.T) {
	plugin := plugins.NewPatternPlugin()

	redosTests := []struct {
		name        string
		pattern     string
		value       string
		maxDuration time.Duration
	}{
		{
			name:        "Exponential backtracking protection",
			pattern:     "in:*a*b*c*d*e*f*g*h*i*j*",
			value:       strings.Repeat("x", 1000),
			maxDuration: 5 * time.Millisecond,
		},
		{
			name:        "Many wildcards with long prefix",
			pattern:     "in:" + strings.Repeat("a", 100) + "*",
			value:       strings.Repeat("a", 100) + strings.Repeat("b", 1000),
			maxDuration: 2 * time.Millisecond,
		},
		{
			name:        "Complex pattern with overlaps",
			pattern:     "in:*abc*abc*abc*abc*",
			value:       strings.Repeat("abc", 1000),
			maxDuration: 5 * time.Millisecond,
		},
	}

	for _, tt := range redosTests {
		t.Run(tt.name, func(t *testing.T) {
			validator, err := plugin.Parse("test", tt.pattern)
			if err != nil {
				t.Fatalf("Failed to create validator: %v", err)
			}

			// –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
			iterations := 10
			var totalDuration time.Duration

			for i := 0; i < iterations; i++ {
				start := time.Now()
				result := validator(tt.value)
				duration := time.Since(start)
				totalDuration += duration

				_ = result // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			}

			avgDuration := totalDuration / time.Duration(iterations)
			if avgDuration > tt.maxDuration {
				t.Errorf("Potential ReDoS detected: %s took avg %v (max allowed: %v). Pattern: %q, Value length: %d",
					tt.name, avgDuration, tt.maxDuration, tt.pattern, len(tt.value))
			}

			t.Logf("Pattern: %q, Value length: %d, Avg duration: %v",
				tt.pattern, len(tt.value), avgDuration)
		})
	}
}

// TestPluginInputValidation —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
func TestPluginInputValidation(t *testing.T) {
	pluginTests := []struct {
		name   string
		plugin interface {
			CanParse(constraintStr string) bool
			Parse(paramName, constraintStr string) (func(string) bool, error)
			GetName() string
		}
	}{
		{"pattern", plugins.NewPatternPlugin()},
		{"length", plugins.NewLengthPlugin()},
		{"comparison", plugins.NewComparisonPlugin()},
		{"range", plugins.NewRangePlugin()},
	}

	maliciousInputs := []struct {
		name         string
		constraint   string
		shouldReject bool
		description  string
	}{
		{
			name:         "Extremely long constraint",
			constraint:   "len:" + strings.Repeat("a", 10000),
			shouldReject: true,
			description:  "Very long constraints should be rejected",
		},
		{
			name:         "Null bytes in constraint",
			constraint:   "in:test\x00value",
			shouldReject: false, // –ú–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–ø—É—Å—Ç–∏–º—ã –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–ª–∞–≥–∏–Ω–∞—Ö
			description:  "Null bytes should be handled safely",
		},
		{
			name:         "Invalid UTF-8 sequence",
			constraint:   "in:valid\xff\xfeinvalid",
			shouldReject: true,
			description:  "Invalid UTF-8 should be rejected",
		},
		{
			name:         "Only special characters",
			constraint:   "in:!@#$%^&*()",
			shouldReject: false, // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–ª–∞–≥–∏–Ω–∞
			description:  "Special characters should be handled",
		},
		{
			name:         "Empty string",
			constraint:   "",
			shouldReject: true,
			description:  "Empty constraints should be rejected",
		},
		{
			name:         "Valid length constraint",
			constraint:   "len:>5",
			shouldReject: false,
			description:  "Valid length constraint should be accepted",
		},
		{
			name:         "Valid range constraint",
			constraint:   "range:1-10",
			shouldReject: false,
			description:  "Valid range constraint should be accepted",
		},
		{
			name:         "Valid comparison constraint",
			constraint:   ">100",
			shouldReject: false,
			description:  "Valid comparison constraint should be accepted",
		},
	}

	for _, pluginTest := range pluginTests {
		t.Run(pluginTest.name, func(t *testing.T) {
			for _, input := range maliciousInputs {
				t.Run(input.name, func(t *testing.T) {
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–ª–∞–≥–∏–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–∫–æ–π –≤–≤–æ–¥
					canParse := pluginTest.plugin.CanParse(input.constraint)

					// –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
					validator, err := pluginTest.plugin.Parse("test_param", input.constraint)

					if input.shouldReject {
						// –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞
						if err == nil && validator != nil {
							t.Errorf("%s: Expected rejection for constraint %q, but it was accepted",
								input.description, input.constraint)
						}
					} else {
						// –ï—Å–ª–∏ CanParse –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, —Ç–æ Parse –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å
						if canParse && err != nil {
							t.Logf("%s: Plugin can parse but returned error (may be acceptable): %v",
								input.description, err)
						}

						// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –ø–∞–Ω–∏–∫–∏
						func() {
							defer func() {
								if r := recover(); r != nil {
									t.Errorf("%s: PANIC for constraint %q: %v",
										input.description, input.constraint, r)
								}
							}()

							// –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
							if validator != nil {
								testValues := []string{"", "test", "123", strings.Repeat("x", 100)}
								for _, testValue := range testValues {
									result := validator(testValue)
									_ = result // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
								}
							}
						}()
					}
				})
			}
		})
	}
}

// TestPluginMemorySafety —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
func TestPluginMemorySafety(t *testing.T) {
	plugin := plugins.NewPatternPlugin()

	t.Run("Memory exhaustion protection", func(t *testing.T) {
		// –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å –ø—Ä–æ—Å—Ç—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
		validator, err := plugin.Parse("test", "in:*test*")
		if err != nil {
			t.Fatalf("Failed to create validator: %v", err)
		}

		// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		testCases := []struct {
			name  string
			value string
		}{
			{"Empty string", ""},
			{"Normal string", "this is a test value"},
			{"Very long string", strings.Repeat("x", 100000)},
			{"Many matches", strings.Repeat("test", 1000)},
		}

		for _, tc := range testCases {
			t.Run(tc.name, func(t *testing.T) {
				start := time.Now()
				result := validator(tc.value)
				duration := time.Since(start)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
				if duration > 100*time.Millisecond {
					t.Errorf("Memory exhaustion potential: processing %d bytes took %v",
						len(tc.value), duration)
				}

				_ = result
				t.Logf("Processed %d bytes in %v, result: %v",
					len(tc.value), duration, result)
			})
		}
	})
}

// TestPluginConcurrentSafety —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
func TestPluginConcurrentSafety(t *testing.T) {
	pluginList := []struct {
		name   string
		plugin interface {
			CanParse(constraintStr string) bool
			Parse(paramName, constraintStr string) (func(string) bool, error)
			GetName() string
		}
	}{
		{"pattern", plugins.NewPatternPlugin()},
		{"length", plugins.NewLengthPlugin()},
		{"comparison", plugins.NewComparisonPlugin()},
		{"range", plugins.NewRangePlugin()},
	}

	for _, pl := range pluginList {
		t.Run(pl.name, func(t *testing.T) {
			const goroutines = 50
			const iterations = 100

			done := make(chan bool, goroutines)

			for i := 0; i < goroutines; i++ {
				go func(id int) {
					defer func() {
						if r := recover(); r != nil {
							t.Errorf("Goroutine %d panicked: %v", id, r)
						}
						done <- true
					}()

					for j := 0; j < iterations; j++ {
						// –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ constraint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
						var constraint string
						switch pl.name {
						case "pattern":
							constraint = "in:*test*"
						case "length":
							constraint = "len:>5"
						case "comparison":
							constraint = ">10"
						case "range":
							constraint = "range:1..100"
						}

						validator, err := pl.plugin.Parse("test_param", constraint)
						if err != nil {
							continue // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏
						}

						// –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
						if validator != nil {
							testValues := []string{"", "test", "12345", "valid_value"}
							for _, value := range testValues {
								result := validator(value)
								_ = result
							}
						}
					}
				}(i)
			}

			// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
			for i := 0; i < goroutines; i++ {
				<-done
			}
		})
	}
}

// TestPluginBoundaryConditions —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
func TestPluginBoundaryConditions(t *testing.T) {
	plugin := plugins.NewPatternPlugin()

	tests := []struct {
		name        string
		pattern     string
		values      []string
		expectError bool
		description string
	}{
		{
			name:        "Empty value handling",
			pattern:     "in:*",
			values:      []string{""},
			expectError: false,
			description: "Empty values should be handled correctly",
		},
		{
			name:        "Very long pattern - should be rejected",
			pattern:     "in:" + strings.Repeat("a", 1000) + "*", // 1001 —Å–∏–º–≤–æ–ª–æ–≤ - –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
			values:      []string{},
			expectError: true,
			description: "Very long patterns should be rejected",
		},
		{
			name:        "Maximum length pattern",
			pattern:     "in:" + strings.Repeat("a", 999) + "*", // 1000 —Å–∏–º–≤–æ–ª–æ–≤ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
			values:      []string{strings.Repeat("a", 999) + "suffix"},
			expectError: false,
			description: "Maximum length patterns should work",
		},
		{
			name:        "Unicode boundary",
			pattern:     "in:*" + string([]rune{0x1F600}), // —Å–º–∞–π–ª–∏–∫
			values:      []string{"prefix" + string([]rune{0x1F600})},
			expectError: false,
			description: "Unicode boundary characters should work",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			validator, err := plugin.Parse("test", tt.pattern)

			if tt.expectError {
				if err == nil {
					t.Errorf("Expected error for pattern %q, but got none", tt.pattern)
				}
				return
			}

			if err != nil {
				t.Fatalf("Failed to create validator: %v", err)
			}

			for _, value := range tt.values {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –ø–∞–Ω–∏–∫–∏
				func() {
					defer func() {
						if r := recover(); r != nil {
							t.Errorf("%s: PANIC for value %q: %v",
								tt.description, value, r)
						}
					}()

					result := validator(value)

					// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å UTF-8 –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
					if value != "" && !utf8.ValidString(value) {
						t.Logf("Warning: Test value contains invalid UTF-8: %q", value)
					}

					t.Logf("Pattern: %q, Value: %q, Result: %v - %s",
						tt.pattern, value, result, tt.description)
				}()
			}
		})
	}
}

// TestPluginResourceCleanup —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
func TestPluginResourceCleanup(t *testing.T) {
	plugin := plugins.NewPatternPlugin()

	// –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —É—Ç–µ—á–µ–∫
	patterns := []string{
		"in:*test*",
		"in:prefix*",
		"in:*suffix",
		"in:*a*b*c*",
		"in:" + strings.Repeat("x", 100) + "*",
	}

	// –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
	for i := 0; i < 1000; i++ {
		for _, pattern := range patterns {
			validator, err := plugin.Parse("test", pattern)
			if err != nil {
				continue
			}

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
			testValues := []string{"", "test", "no_match", strings.Repeat("x", 100)}
			for _, value := range testValues {
				result := validator(value)
				_ = result
			}
		}

		if i%100 == 0 {
			t.Logf("Completed %d iterations without resource leaks", i)
		}
	}
}

// TestPluginSpecificSecurity —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞
func TestPluginSpecificSecurity(t *testing.T) {
	t.Run("LengthPlugin security", func(t *testing.T) {
		plugin := plugins.NewLengthPlugin()

		securityTests := []struct {
			name       string
			constraint string
			shouldFail bool
		}{
			{"Valid length", "len:>5", false},
			{"Invalid operator", "len:>>5", true},
			{"Negative number", "len:>-5", true},
			{"Very large number", "len:>9999999999", true},
			{"Empty after len", "len:", true},
			{"Invalid characters", "len:>5abc", true},
		}

		for _, tt := range securityTests {
			t.Run(tt.name, func(t *testing.T) {
				_, err := plugin.Parse("test", tt.constraint)
				if tt.shouldFail && err == nil {
					t.Errorf("Expected error for constraint %q, but got none", tt.constraint)
				}
				if !tt.shouldFail && err != nil {
					t.Errorf("Unexpected error for constraint %q: %v", tt.constraint, err)
				}
			})
		}
	})

	t.Run("ComparisonPlugin security", func(t *testing.T) {
		plugin := plugins.NewComparisonPlugin()

		securityTests := []struct {
			name       string
			constraint string
			shouldFail bool
		}{
			{"Valid comparison", ">10", false},
			{"Double operator", ">>10", true},
			{"Invalid combination", "><10", true},
			{"Missing number", ">", true},
			{"Very large number", ">9999999999", true},
			{"Negative number", ">-5", false},
			{"Invalid characters", ">10abc", true},
		}

		for _, tt := range securityTests {
			t.Run(tt.name, func(t *testing.T) {
				_, err := plugin.Parse("test", tt.constraint)
				if tt.shouldFail && err == nil {
					t.Errorf("Expected error for constraint %q, but got none", tt.constraint)
				}
				if !tt.shouldFail && err != nil {
					t.Errorf("Unexpected error for constraint %q: %v", tt.constraint, err)
				}
			})
		}
	})

	t.Run("RangePlugin security", func(t *testing.T) {
		plugin := plugins.NewRangePlugin()

		securityTests := []struct {
			name       string
			constraint string
			shouldFail bool
		}{
			{"Valid range", "range:1..10", false},
			{"Valid range with dash", "range:1-10", false},
			{"Invalid range", "range:10..1", true},
			{"Very large numbers", "range:1..9999999999", true},
			{"Negative range", "range:-10..10", false},
			{"Missing separator", "range:110", true},
			{"Invalid characters", "range:1..10abc", true},
		}

		for _, tt := range securityTests {
			t.Run(tt.name, func(t *testing.T) {
				_, err := plugin.Parse("test", tt.constraint)
				if tt.shouldFail && err == nil {
					t.Errorf("Expected error for constraint %q, but got none", tt.constraint)
				}
				if !tt.shouldFail && err != nil {
					t.Errorf("Unexpected error for constraint %q: %v", tt.constraint, err)
				}
			})
		}
	})
}
